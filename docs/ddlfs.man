.TH ddlfs 1

.SH NAME
ddlfs \- Represent Oracle Database objects as their DDL stored in .sql files.

.SH DESCRIPTION
When mounted, following directory tree is available under mountpoint:

 <schema>/
   FUNCTION/
   JAVA_SOURCE/
   PACKAGE_BODY/
   PACKAGE_SPEC/
   PROCEDURE/
   TRIGGER/
   TYPE/
   TYPE_BODY/
   VIEW/

Each folder has .SQL file for each object of specified type (parent folder) in database. For example, folder <schema>/VIEW/ 
has one .SQL file for every view in this schema.

If you write to those files, filesystem will execute DDL stored in the file on file close (thus, you can edit database 
objects via this filesystem). Filesystem keeps a local copy on regular filesystem while the file is open 
(between open and close calls).

If you delete such .SQL file, a DROP <object_type> <object_name> is issued.

If you create new file (e.g. using touch utility), a new object is created from template - e.g. for views, it is 
"create view "<schema>"."<object_name>" as select * from dual;".

All files have last modified date set to last_ddl_time from all_objects view. All files report file size 0 (or whatever 
number is set for filesize= parameter); except for those that are currently open - those report their actual, correct, 
file size.

One special file exists, \fBddlfs.log\fR, which contains log of every executed DDL operation along with possible errors 
and warnings (e.g. indicating on which line syntax error occured). You can tail -F this file - just use capital -F, be
cause this file only exists in-memory and is rewritten in cyclic manner.

.SH MOUNT OPTIONS
This section describes mount options specific to
ddlfs. Other generic mount options may be used as well; 
see \fBmount\fR(8) and \fBfuse\fR(8) for details.

.TP
.BR database=\fIstr\fR
Oracle EasyConnect string, used to connect to database. Use / to connect to local instance using bequeath protocol.

.TP
.BR username=\fIstr\fR
Username used to connect to database specified by database parameter. Specify / to use os authentication (like in sqlplus / as sysdba).

.TP
.BR password=\fIstr\fR
Password used to connect to database specified by database parameter. Specify / to use os authentication.

.TP
.BR schemas=\fIstr\fR
Schema or list of schemas, separated by :. Those are schemas of which objects are "exported" as .sql files. You may 
specify (multiple) partial schema name(s) using % sign, e.g.: APP_%:BLA_%, which would match all schemas with names 
starting with either APP_ or BLA_. It defaults '%' (to show all schemas).

.TP
.BR pdb=\fIstr\fR
If you use os authentication, you'll be connected to CDB$ROOT by default in multitenan environment. This setting, if 
specified, will cause ddlfs to issue "alter session set container=<pdb>;" right after logon.

.TP
.BR userrole=\fIstr\fR
You can specify role such as SYSDBA or SYSOPER here.

.TP
.BR lowercase
Convert all filenames to lowercase, ignoring the original case as stored in database. You can only use this option if
you are sure that all object names have distinct file names when converted to lowercase.

.TP
.BR loglevel=\fR[\fIDEBUG\fR|\fIINFO\fR|\fIERROR\fR]
Defines verbosity level used for stdout messages. Default value is INFO.

.TP
.BR temppath=\fI/tmp\fR
Where to store temporary files - offline copies of DDL statements while their files are open. /tmp location is used by 
default. All files created by ddlfs have names prefixed by ddlfs-<PID> in this folder.

.TP
.BR keepcache
Local temporary files (created in \fBtemppath=\fR folder) are deleted on umount by default. Specify this mount option 
to keep those temp files intact after umount. This has performance benefits when using \fBfilesize=-1\fR.

.TP
.BR filesize=\fI0\fR
All .sql files report file size as specified by this parameter - unless if file is currently open; correct file size is 
always returned for currently open files. Using default value 0 (or not specifying this parameter) should be OK for 
most cases, however, some applications refuse to read files with zero length and only read files up to returned file 
size. If you use such application with ddlfs specify this parameter to be -1, which will cause ddlfs to always return 
correct file sizes. This has a bit of performance penalty as ddlfs must read contents of every object of specified type 
in order to list their correct file sizes (ls -l). Possible alternative is to set this parameter to any value larger 
then any database object, e.g. to 10485760, this is 10mb, which should be enough in most cases). Note that this may 
also confuse some applications.



